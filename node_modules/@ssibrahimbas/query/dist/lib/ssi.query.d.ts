import { ISsiQuery } from "./ssi.query.interface";
import "./util/string.util";
export declare class SsiQuery implements ISsiQuery {
    private _select;
    private _from;
    private _where;
    private _limit;
    private _offset;
    private _join;
    private _orderBy;
    private _groupBy;
    private _having;
    private _grouped;
    private _query;
    private _prefix;
    private _operators;
    constructor();
    table(table: string | Array<string>): this;
    select(fields: string | Record<string, string> | Array<string> | Array<Record<string, string>>): this;
    private parseSelectWithAsObject;
    groupConcat(fields: string, name: string | null): this;
    least(fields: Array<string>, name: string | null): this;
    max(fields: string, name: string | null): this;
    min(fields: string, name: string | null): this;
    sum(fields: string, name: string | null): this;
    count(fields: string, name: string | null): this;
    avg(fields: string, name: string | null): this;
    join(table: string, field1?: string | null, operator?: string | null, field2?: string | null, type?: string): this;
    innerJoin(table: string, field1: string, operator?: string, field2?: string): this;
    leftJoin(table: string, field1: string, operator?: string, field2?: string): this;
    rightJoin(table: string, field1: string, operator?: string, field2?: string): this;
    fullOuterJoin(table: string, field1: string, operator?: string, field2?: string): this;
    leftOuterJoin(table: string, field1: string, operator?: string, field2?: string): this;
    rightOuterJoin(table: string, field1: string, operator?: string, field2?: string): this;
    where(where: string | Array<string>, operator?: string | Array<string> | boolean | null, val?: string | null | number, type?: string, andOr?: string): this;
    orWhere(where: string | Array<string>, operator?: string | Array<string> | boolean | null, val?: string | null | number): this;
    notWhere(where: string | Array<string>, operator?: string | Array<string> | boolean | null, val?: string | null | number): this;
    orNotWhere(where: string | Array<string>, operator?: string | Array<string> | boolean | null, val?: string | null | number): this;
    whereNull(where: string, not?: boolean): this;
    whereNotNull(where: string): this;
    grouped(callback: (q: this) => any): this;
    in(field: string, keys: Array<string | number>, type?: string, andOr?: string): this;
    notIn(field: string, keys: Array<string | number>): this;
    orIn(field: string, keys: Array<string | number>): this;
    orNotIn(field: string, keys: Array<string | number>): this;
    findInSet(field: string, key: string | number, type?: string, andOr?: string): this;
    notFindInSet(field: string, key: string | number): this;
    orFindInSet(field: string, key: string | number): this;
    orNotFindInSet(field: string, key: string | number): this;
    between(field: string, value1: string | number, value2: string | number, type?: string, andOr?: string): this;
    notBetween(field: string, value1: string | number, value2: string | number): this;
    orBetween(field: string, value1: string | number, value2: string | number): this;
    orNotBetween(field: string, value1: string | number, value2: string | number): this;
    like(field: string, data: string, type?: string, andOr?: string): this;
    orLike(field: string, data: string): this;
    notLike(field: string, data: string): this;
    orNotLike(field: string, data: string): this;
    limit(limit: number, limitEnd?: number | null): this;
    offset(offset: number): this;
    pagination(perPage: number, page: number): this;
    orderBy(orderBy: string, orderDir?: string | null): this;
    groupBy(groupBy: string | Array<string>): this;
    having(field: string, operator?: string | Array<string> | null, val?: string | null): this;
    get(): string;
    getAll(): string;
    insert(data: object): string;
    update(data: object): string;
    delete(): string;
    analyze(): string;
    check(): string;
    checksum(): string;
    optimize(): string;
    repair(): string;
    query(query: string, values?: Array<string | number> | null): this;
    reset(): void;
    getQuery(): string | null;
    private setWhere;
    private setWhereGrouped;
    private optimizeSelect;
    private optimizeSqlFunctionWithPlaceholder;
    private escape;
    private updateQueryForUpdateAndDeleteQueries;
}
export declare const Query: SsiQuery;
